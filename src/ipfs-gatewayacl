#!/bin/bash

ipfs_gatewayacl_version="v0.1.4"

rootDir=$( dirname "$0" )

ACTION=$1
PARAM1=$2
PARAM2=$3

log(){
	default="\033[0m"
	case $1 in
		"ERROR") color="\033[31;1m";;
		"WARNING") color="\033[33;1m";;
		"INFO") color="\033[37;1m";;
		"POINT") color="\033[34;1m";;
		"SUCCESS") color="\033[36;1m";;
		*) color="\033[0;37m";;
	esac
	printf "$(date +"%Y-%m-%dT%H:%M:%S%:z") | $color$1$default | $2\n"
	[ $1 = "ERROR" ] && exit
}

#validate parameters
[ -z $ACTION ] && log "ERROR" "Parameter missing. Get instructions with: ipfs-gatewayacl help"

#prevalidation action: help
if [ "$ACTION" = "help" ]; then
	echo "Usage: ipfs-gatewayacl [ACTION] [P1] [P2]"
	echo "Controls IPFS-GatewayACL configuration, cache and logs."
	echo ""
	echo "Available ACTIONS:"
	echo "- help             Print this information."
	echo "- version          Print version of ipfs-gatewayacl"
	echo "- config           Show or modify configuration."
	echo "  + P1: init       Create default.json"
	echo "  + P1: edit       Edit default.json"
	echo "  + P1: show       Show default.json"
	echo "- block            Block a CID or CID/PATH."
	echo "  + P1: CID        CID to block in v0 or v1 Format."
	echo "  + P2: PATH*      optional File PATH to block"
	echo "- update           Update CID_Blocklist and/or Pinset."
	echo "  + P1: blocklist  Update CID_Blocklist"
	echo "  + P1: pinset     Update Pinset"
	echo "- logrotate        Rotate Debug-Logfile."
	echo "- cron             Run typical cron job actions."
	echo ""
	echo "* means optional parameter"
	echo ""
	echo "Examples:"
	echo ""
	echo "Following command creates an config file:"
	printf "\033[0;34mipfs-gatewayacl config init\033[0m\n"
	echo ""
	echo "Same as above but overwriting config file path using an env-variable:"
	printf "\033[0;34mexport IPFS_GATEWAYACL_CONFIG=\"/var/test/default.json\"\033[0m\n"
	printf "\033[0;34mipfs-gatewayacl config init\033[0m\n"
	echo ""
	echo "Block a CID (using v0 CID); a specific File (using v0 CID and Path); and same with v1 CID:"
	printf "\033[0;34mipfs-gatewayacl block QmcniBv7UQ4gGPQQW2BwbD4ZZHzN3o3tPuNLZCbBchd1zh\033[0m\n"
	printf "\033[0;34mipfs-gatewayacl block QmfUmFJfba8Qx4FV2PQM9JVuyPNRQouEpkdjpcYZqFDBQW bad.txt\033[0m\n"
	printf "\033[0;34mipfs-gatewayacl block bafybeih6vk3xn3o56ecldk7u3qwmjgrdbofgqtbobvlogluzyibjiolv7m bad.txt\033[0m\n"
	echo ""
	echo "To automate update and cleanup you can use cronjobs."
	echo "The following commands sets up a basic usecase:"
	printf "\033[0;34echo \"*/15 * * * * ipfs /usr/local/bin/ipfs-gatewayacl cron\" | sudo tee -a /etc/crontab > /dev/null\033[0m\n"	
	exit
elif [ "$ACTION" == "version" ]; then
	echo "$ipfs_gatewayacl_version"
	exit
fi

#set config file
if [ "$IPFS_GATEWAYACL_CONFIG" != "" ]; then
	config=$IPFS_GATEWAYACL_CONFIG
else
	#detect config file
	config="$rootDir/config/default.json"
	if [[ ! -f "$config" ]]; then
		log "WARNING" "Config not found in: $config"
		config="/opt/ipfs-gatewayacl/config/default.json"
	fi
	[[ ! -f "$config" ]] && log "WARNING" "Config not found in: $config"
fi

log "INFO" "Using config file: $config"

#prevalidation action: config
if ( [ "$ACTION" = "config" ] ); then
	case $PARAM1 in
	"init")
		[[ -f "$config" ]] && log "ERROR" "Config already exists. Can't continue."
		mkdir -p "$( dirname "$config" )"
		cp "$( dirname "$config" )/default.example.json" $config
		log "SUCCESS" "Config initialized"
		;;
	"edit")
		[[ ! -f "$config" ]] && log "ERROR" "Config file missing."
		echo "About to edit (read-write): $config"
		read -r -p "Press ENTER to continue"
		nano $config
		;;
	"show")
		[[ ! -f "$config" ]] && log "ERROR" "Config file missing."
		echo "About to show (read-only): $config"
		read -r -p "Press ENTER to continue"
		cat $config
		;;
	esac
	exit
fi

if [[ ! -f "$config" ]]; then
	log "ERROR" "Config missing. Get instructions with: ipfs-gatewayacl help"
fi

#validate config file
if [[ ! $(jq '.' $config) ]]; then
	log "WARNING" "Config file does not contain valid json data."
	log "ERROR" "Config invalid. Get instructions with: ipfs-gatewayacl help"
fi

cidblocklist_rawLocalFile=$( jq -r '.cid_blocklist.localFile' $config )
cidblocklist_source=$( jq -r '.cid_blocklist.source' $config )
cidblocklist_remoteFile=$( jq -r '.cid_blocklist.remoteFile' $config )
cidblocklist_rawDataFolder=$( jq -r '.cid_blocklist.dataFolder' $config )
logrotate_rawLogFile=$( jq -r '.logfile' $config )
pinset_rawDataFolder=$( jq -r '.pinset_filter.dataFolder' $config )

if [ "$cidblocklist_rawDataFolder" = "null" ] \
	|| [ "$cidblocklist_rawLocalFile" = "null" ] \
	|| [ "$cidblocklist_remoteFile" = "null" ] \
	|| [ "$cidblocklist_source" = "null" ] \
	|| ( [ ! "$cidblocklist_source" = "remote" ] && [ ! "$cidblocklist_source" = "local" ] && [ ! "$cidblocklist_source" = "both" ] ) \
  || [ "$pinset_rawDataFolder" = "null" ] \
  || [ "$logrotate_rawLogFile" = "null" ]; then
	log "WARNING" "Found invalid values in config file."
	log "ERROR" "Can't continue without valid config file. Get instructions with: ipfs-gatewayacl help"
fi

case $ACTION in

  "block")
		if [ -z $PARAM1 ]; then
			log "ERROR" "Parameter missing! Get instructions with: ipfs-gatewayacl help"
			exit
		fi

		pCID=$PARAM1
		pPATH=$PARAM2

		localFile=$cidblocklist_rawLocalFile
		localFileHistory="${localFile}.history"

		cid=$(echo -n $(ipfs cid base32 $pCID))
		path=$pPATH

		if [ -z "$path" ]; then
			deny=$cid
		else
			deny="$cid/$path"
		fi

		sha256=$(echo -n $deny | sha256sum | awk '{print $1;}')

		log "INFO" "Summary:"
		echo "Provided CID: $pCID"
		echo "Provided Path: $path"
		echo ""
		echo "base32 encoded cidv1: $cid"
		echo ""
		echo "Blocking: $deny"
		echo "SHA256: $sha256"

		echo -e "$(date +"%Y-%m-%dT%H:%M:%S%z")\t$deny" >> $localFileHistory
		if ! grep -Fxq "$sha256" $localFile; then
			echo "$sha256" >> $localFile
		fi

		log "SUCCESS" "CID successfully blocked."

		while true; do
		  read -r -p "Do you want to update cid-blocklist now? (yes|No) " answer
		  case $answer in
		    [Yy]* ) break;;
		    [Nn]* ) exit;;
			"" ) exit;;
		    * ) echo "Please answer yes or no.";;
		  esac
		done

		$rootDir/ipfs-gatewayacl update cid-blocklist
    ;;

  "update")
		if [ -z $PARAM1 ]; then
			log "ERROR" "Parameter missing! Get instructions with: ipfs-gatewayacl help"
			exit
		elif [[ $PARAM1 == "blocklist" ]] ; then
			log "INFO" "UPDATE CID-BLOCKLIST STARTED"

			dataFolder=$cidblocklist_rawDataFolder
			dataFolderTEMP="${dataFolder}_TEMP"
			localFile=$cidblocklist_rawLocalFile

			log "INFO" "Preparing folder structure"
			rm -rf $dataFolderTEMP
			mkdir -p $dataFolderTEMP
			for i in {0..255}; do mkdir $dataFolderTEMP/$(printf "%02x" $i); done

			if [ $cidblocklist_source = "remote" ]; then
				log "INFO" "Generating cid-blocklist using remote data from ${cidblocklist_remoteFile}"
				{ curl -sN $cidblocklist_remoteFile | grep "^//" | sed 's/\/\///g' ; } | while read -r line; do echo "$line" >> $dataFolderTEMP/${line:0:2}/${line:0:4}; done
			fi

			if [ $cidblocklist_source = "local" ]; then
				log "INFO" "Generating cid-blocklist using local data from $localFile"
				{ cat $localFile 2>/dev/null ; } | while read -r line; do echo "$line" >> $dataFolderTEMP/${line:0:2}/${line:0:4}; done
			fi

			if [ $cidblocklist_source = "both" ]; then
				log "INFO" "Generating cid-blocklist using remote data from ${cidblocklist_remoteFile} including local data from $localFile"
				{ curl -sN $cidblocklist_remoteFile | grep "^//" | sed 's/\/\///g' ; cat $localFile 2>/dev/null ; } | while read -r line; do echo "$line" >> $dataFolderTEMP/${line:0:2}/${line:0:4}; done
			fi

			echo "$(date +"%Y-%m-%dT%H:%M:%S%:z")" > $dataFolderTEMP/version
			echo ""

			log "INFO" "Overwriting data folder with temp data folder"
			rsync -ac --delete "$dataFolderTEMP/" "$dataFolder/"
			rm -rf $dataFolderTEMP

			log "INFO" "cid-blocklist now counts $(find $dataFolder -type f -exec cat {} + | wc -l) records."

			log "INFO" "cid-blocklist updated!"
			log "INFO" "UPDATE CID-BLOCKLIST ENDED"

		elif [[ $PARAM1 == "pinset" ]] ; then
			
			log "INFO" "UPDATE PINSET STARTED"

			dataFolder=$pinset_rawDataFolder
			dataFolderTEMP="${dataFolder}_TEMP"

			log "INFO" "Preparing folder structure"

			rm -rf $dataFolderTEMP
			mkdir -p $dataFolderTEMP

			log "INFO" "Generating pinset using local pins"
			{ ipfs pin ls -q -t recursive | ipfs cid base32 ; } | while read -r line; do mkdir -p $dataFolderTEMP/${line:0:8}; echo "$line" >> $dataFolderTEMP/${line:0:8}/${line:0:10}; done
			echo "$(date +"%Y-%m-%dT%H:%M:%S%:z")" > $dataFolderTEMP/version

			log "INFO" "Overwriting data folder with temp data folder"
			rsync -ac --delete "$dataFolderTEMP/" "$dataFolder/"
			rm -rf $dataFolderTEMP

			log "INFO" "pinset now counts $(find $dataFolder -type f -exec cat {} + | wc -l) records."

			log "INFO" "pinset updated!"
			log "INFO" "UPDATE PINSET ENDED"

		else
			log "ERROR" "Parameter invalid! Get instructions with: ipfs-gatewayacl help"
			exit
		fi
    ;;

  "logrotate")
    
		log "INFO" "ROTATE LOG STARTED"

		logFile=$logrotate_rawLogFile

		if [[ ! -f "$logFile" ]]; then
			log "WANRING" "Logfile doesn't exist: $logFile"
		else
			max_file_size=$((1024 * 1024 * 20)) # 20MB
			file_size=`du -b $logFile | tr -s '\t' ' ' | cut -d' ' -f1`
			log "INFO" "FileSize: $(bc <<< "scale=2; $file_size/1024/1024")MB"
		  if [ $file_size -gt $max_file_size ];then
		      timestamp=`date +%s`
		      rm -f ${logFile}.9.gz
		      for i in {8..1}; do
		      	mv -f ${logFile}.${i}.gz ${logFile}.$(($i+1)).gz 2>/dev/null; true
		      done
		      mv -f ${logFile}.gz ${logFile}.1.gz 2>/dev/null; true
		      gzip $logFile
		      log "INFO" "LogFile rotated."
		  else
		  	log "INFO" "LogFile not being rotated because FileSize doesn't exceed $(bc <<< "scale=0; $max_file_size/1024/1024")MB"
		  fi
		fi

		log "INFO" "ROTATE LOG ENDED"
    ;;

  "cron")
    log "INFO" "run cron job actions..."
    $rootDir/ipfs-gatewayacl update pinset
    $rootDir/ipfs-gatewayacl update blocklist
    $rootDir/ipfs-gatewayacl logrotate
    ;;

  *)
    log "ERROR" "Unkown Action."
    ;;
esac
